name: Self-hosted Deploy

on:
  push:
    branches: [ prod ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
        with:
          clean: true

      - name: Create .env file
        run: |
          cat > .env << EOF
          GOALS_CLOUDFLARED_TOKEN=${{ secrets.GOALS_CLOUDFLARED_TOKEN }}
          BACKUP_PATH=${{ secrets.BACKUP_PATH }}
          GOALS_GEMINI_API_KEY=${{ secrets.GOALS_GEMINI_API_KEY }}
          REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }}
          GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_REDIRECT_URL=${{ secrets.GOOGLE_REDIRECT_URL }}
          HOST_URL=${{ secrets.HOST_URL }}
          NEO4J_URI=bolt://goals_db:7687
          NEO4J_USERNAME=neo4j
          NEO4J_PASSWORD=${{ secrets.NEO4J_PASSWORD }}
          EOF

      - name: Ensure backup paths exist (no sudo)
        env:
          BACKUP_PATH: ${{ secrets.BACKUP_PATH }}
        run: |
          BP="${BACKUP_PATH:-/var/lib/goals/backups}"
          docker run --rm -v "$BP:/b" alpine sh -lc 'mkdir -p /b && chmod 0777 /b || true'
          docker run --rm -v "/var/lib/goals/backup-logs:/l" alpine sh -lc 'mkdir -p /l && chmod 0777 /l || true'

      - name: Stop and remove existing containers
        run: |
          docker compose -p p -f docker-compose.prod.yaml down --remove-orphans || true
          docker system prune -f || true

      - name: Build containers with no cache
        run: docker compose -p p -f docker-compose.prod.yaml build --no-cache

      - name: Deploy stack
        run: docker compose -p p -f docker-compose.prod.yaml up -d
