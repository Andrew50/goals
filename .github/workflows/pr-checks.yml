name: Pull Request Checks

on:
  pull_request:
    branches: [ prod ]

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changed-files:
    name: Detect Changed Files
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      backend: ${{ steps.compute.outputs.backend }}
      frontend: ${{ steps.compute.outputs.frontend }}
      any_changes: ${{ steps.compute.outputs.any_changes }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Compute changed files
        id: compute
        shell: bash
        run: |
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          echo "Base: $BASE_SHA"
          echo "Head: $HEAD_SHA"
          git fetch --no-tags --depth=1 origin "+$BASE_SHA:$BASE_SHA" "+$HEAD_SHA:$HEAD_SHA" || true
          CHANGED_FILES=$(git diff --name-only "$BASE_SHA"..."$HEAD_SHA" || true)
          echo "Changed files:\n$CHANGED_FILES"
          backend_changed=false
          frontend_changed=false
          if echo "$CHANGED_FILES" | grep -q '^backend/'; then backend_changed=true; fi
          if echo "$CHANGED_FILES" | grep -q '^frontend/'; then frontend_changed=true; fi
          any_changes=false
          if [ "$backend_changed" = true ] || [ "$frontend_changed" = true ]; then any_changes=true; fi
          echo "backend=$backend_changed" >> "$GITHUB_OUTPUT"
          echo "frontend=$frontend_changed" >> "$GITHUB_OUTPUT"
          echo "any_changes=$any_changes" >> "$GITHUB_OUTPUT"

  check-previous-runs:
    name: Check Previous Test Runs
    runs-on: ubuntu-latest
    timeout-minutes: 3
    outputs:
      backend_previously_failed: ${{ steps.check-failures.outputs.backend_failed }}
      frontend_previously_failed: ${{ steps.check-failures.outputs.frontend_failed }}
      e2e_previously_failed: ${{ steps.check-failures.outputs.e2e_failed }}
    steps:
      - name: Check for previous failures
        id: check-failures
        run: |
          # Initialize all outputs to false by default
          echo "backend_failed=false" >> $GITHUB_OUTPUT
          echo "frontend_failed=false" >> $GITHUB_OUTPUT
          echo "e2e_failed=false" >> $GITHUB_OUTPUT
          
          # Get repository in owner/repo format
          REPO="${GITHUB_REPOSITORY}"
          
          # Try to get workflow runs with error handling
          echo "Checking previous runs for $REPO"
          
          # Check backend tests
          backend_status=$(gh api "/repos/${REPO}/actions/workflows/pr-checks.yml/runs" --jq '.workflow_runs[0].conclusion // "unknown"' 2>/dev/null || echo "unknown")
          echo "Previous backend workflow status: $backend_status"
          if [ "$backend_status" == "failure" ]; then
            echo "backend_failed=true" >> $GITHUB_OUTPUT
          fi
          
          # Check frontend tests (falls back to workflow conclusion if job-specific data isn't available)
          frontend_status=$(gh api "/repos/${REPO}/actions/workflows/pr-checks.yml/runs" --jq '.workflow_runs[0].conclusion // "unknown"' 2>/dev/null || echo "unknown")
          echo "Previous frontend workflow status: $frontend_status"
          if [ "$frontend_status" == "failure" ]; then
            echo "frontend_failed=true" >> $GITHUB_OUTPUT
          fi
          
          # Check E2E tests
          e2e_status=$(gh api "/repos/${REPO}/actions/workflows/e2e-tests.yml/runs" --jq '.workflow_runs[0].conclusion // "unknown"' 2>/dev/null || echo "unknown")
          echo "Previous E2E workflow status: $e2e_status"
          if [ "$e2e_status" == "failure" ]; then
            echo "e2e_failed=true" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # BACKEND PIPELINE
  backend-checks:
    name: Backend Lint & Build
    needs: [changed-files, check-previous-runs]
    if: ${{ needs.changed-files.outputs.backend == 'true' || needs.check-previous-runs.outputs.backend_previously_failed == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        run: |
          rustup set profile minimal
          rustup toolchain install stable --component rustfmt,clippy
          rustup default stable
      
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            backend/target
          key: cargo-${{ runner.os }}-${{ hashFiles('backend/Cargo.lock') }}
      
      - name: Apply code format
        run: cargo fmt --all
      
      - name: Check with clippy
        run: cargo clippy -- -D warnings
        
      - name: Build
        run: cargo build --verbose

  backend-tests:
    name: Backend Unit Tests
    needs: [backend-checks]
    if: always()
    runs-on: ubuntu-latest
    timeout-minutes: 45
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        run: |
          rustup set profile minimal
          rustup toolchain install stable
          rustup default stable
      
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            backend/target
          key: cargo-${{ runner.os }}-${{ hashFiles('backend/Cargo.lock') }}
        
      - name: Run backend unit tests
        run: cargo test --lib
      
      # Run integration tests that require the Neo4j test database
      - name: Create test .env file
        run: |
          echo "GOALS_CLOUDFLARED_TOKEN=test_token" > $GITHUB_WORKSPACE/.env
          echo "BACKUP_PATH=/tmp/backups" >> $GITHUB_WORKSPACE/.env
          echo "GOALS_GEMINI_API_KEY=test_api_key" >> $GITHUB_WORKSPACE/.env
          echo "JWT_SECRET=test_jwt_secret" >> $GITHUB_WORKSPACE/.env
          echo "JWT_EXPIRATION=86400" >> $GITHUB_WORKSPACE/.env
      
      - name: Run backend integration tests
        run: bash run_integration_tests.sh
      
      - name: Mark test success
        if: success()
        run: echo "Tests passed successfully"

  # FRONTEND PIPELINE  
  frontend-checks:
    name: Frontend Lint & Build
    needs: [changed-files, check-previous-runs]
    if: ${{ needs.changed-files.outputs.frontend == 'true' || needs.check-previous-runs.outputs.frontend_previously_failed == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 20
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Lint with ESLint
        run: npx eslint . --ext .js,.jsx,.ts,.tsx
      
      - name: Type check with TypeScript
        run: npx tsc --noEmit
        
      - name: Build
        run: npm run build

  frontend-tests:
    name: Frontend Unit Tests
    needs: [frontend-checks]
    if: always()
    runs-on: ubuntu-latest
    timeout-minutes: 30
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run unit tests
        run: npm run test:ci
        
      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-test-coverage
          path: frontend/coverage/
          retention-days: 30
      
      - name: Mark test success
        if: success()
        run: echo "Tests passed successfully"
      
  # INTEGRATION TESTING
  e2e-tests:
    name: Run E2E Tests
    needs: [changed-files, check-previous-runs, backend-tests, frontend-tests]
    if: |
      always() && 
      (needs.changed-files.outputs.any_changes == 'true' || needs.check-previous-runs.outputs.e2e_previously_failed == 'true')
    uses: ./.github/workflows/e2e-tests.yml
    timeout-minutes: 60
    with:
      ref: ${{ github.ref }}
      skip_tests: false
      num_workers: 32

  # DEPLOYMENT CHECK
  deploy-ready:
    name: Ready for Deployment
    needs: [backend-checks, backend-tests, frontend-checks, frontend-tests, e2e-tests]
    if: always()
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Evaluate overall workflow result
        run: |
          echo "backend-checks: ${{ needs.backend-checks.result }}"
          echo "backend-tests: ${{ needs.backend-tests.result }}"
          echo "frontend-checks: ${{ needs.frontend-checks.result }}"
          echo "frontend-tests: ${{ needs.frontend-tests.result }}"
          echo "e2e-tests: ${{ needs.e2e-tests.result }}"
          if [ "${{ needs.backend-checks.result }}" != "success" ] || \
             [ "${{ needs.backend-tests.result }}" != "success" ] || \
             [ "${{ needs.frontend-checks.result }}" != "success" ] || \
             [ "${{ needs.frontend-tests.result }}" != "success" ] || \
             [ "${{ needs.e2e-tests.result }}" != "success" ]; then
            echo "One or more jobs failed. PR is not ready for deployment."
            exit 1
          else
            echo "All checks passed! This PR is ready to be merged to prod for deployment."
          fi
