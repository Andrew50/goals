name: Pull Request Checks

on:
  pull_request:
    branches: [ prod ]

jobs:
  changed-files:
    name: Detect Changed Files
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
      any_changes: ${{ steps.filter.outputs.backend == 'true' || steps.filter.outputs.frontend == 'true' }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Check for file changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'

  check-previous-runs:
    name: Check Previous Test Runs
    runs-on: ubuntu-latest
    outputs:
      backend_previously_failed: ${{ steps.check-failures.outputs.backend_failed }}
      frontend_previously_failed: ${{ steps.check-failures.outputs.frontend_failed }}
      e2e_previously_failed: ${{ steps.check-failures.outputs.e2e_failed }}
    steps:
      - name: Check for previous failures
        id: check-failures
        run: |
          # Initialize all outputs to false by default
          echo "backend_failed=false" >> $GITHUB_OUTPUT
          echo "frontend_failed=false" >> $GITHUB_OUTPUT
          echo "e2e_failed=false" >> $GITHUB_OUTPUT
          
          # Get repository in owner/repo format
          REPO="${GITHUB_REPOSITORY}"
          
          # Try to get workflow runs with error handling
          echo "Checking previous runs for $REPO"
          
          # Check backend tests
          backend_status=$(gh api "/repos/${REPO}/actions/workflows/pr-checks.yml/runs" --jq '.workflow_runs[0].conclusion // "unknown"' 2>/dev/null || echo "unknown")
          echo "Previous backend workflow status: $backend_status"
          if [ "$backend_status" == "failure" ]; then
            echo "backend_failed=true" >> $GITHUB_OUTPUT
          fi
          
          # Check frontend tests (falls back to workflow conclusion if job-specific data isn't available)
          frontend_status=$(gh api "/repos/${REPO}/actions/workflows/pr-checks.yml/runs" --jq '.workflow_runs[0].conclusion // "unknown"' 2>/dev/null || echo "unknown")
          echo "Previous frontend workflow status: $frontend_status"
          if [ "$frontend_status" == "failure" ]; then
            echo "frontend_failed=true" >> $GITHUB_OUTPUT
          fi
          
          # Check E2E tests
          e2e_status=$(gh api "/repos/${REPO}/actions/workflows/e2e-tests.yml/runs" --jq '.workflow_runs[0].conclusion // "unknown"' 2>/dev/null || echo "unknown")
          echo "Previous E2E workflow status: $e2e_status"
          if [ "$e2e_status" == "failure" ]; then
            echo "e2e_failed=true" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  lint-backend:
    name: Lint Rust Backend
    needs: changed-files
    if: ${{ needs.changed-files.outputs.backend == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Check code format
        run: cargo fmt --all -- --check
      
      - name: Check with clippy
        run: cargo clippy -- -D warnings

  build-backend:
    name: Build Rust Backend
    needs: [changed-files, lint-backend]
    if: ${{ needs.changed-files.outputs.backend == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Build
        run: cargo build --verbose

  lint-frontend:
    name: Lint React Frontend
    needs: changed-files
    if: ${{ needs.changed-files.outputs.frontend == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Lint with ESLint
        run: npx eslint . --ext .js,.jsx,.ts,.tsx
      
      - name: Type check with TypeScript
        run: npx tsc --noEmit
        
  build-frontend:
    name: Build React Frontend
    needs: [changed-files, lint-frontend]
    if: ${{ needs.changed-files.outputs.frontend == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build
        run: npm run build
        
  test-backend:
    name: Run Backend Unit Tests
    needs: [changed-files, check-previous-runs, build-backend]
    if: ${{ needs.changed-files.outputs.backend == 'true' || needs.check-previous-runs.outputs.backend_previously_failed == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        
      - name: Run backend unit tests
        run: cargo test
      
      - name: Mark test success
        if: success()
        run: |
          echo "Tests passed successfully"
          # Here we could store this successful run in a persistent location if needed

  test-frontend:
    name: Run Frontend Unit Tests
    needs: [changed-files, check-previous-runs, build-frontend]
    if: ${{ needs.changed-files.outputs.frontend == 'true' || needs.check-previous-runs.outputs.frontend_previously_failed == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run unit tests
        run: npm run test:ci
        
      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-test-coverage
          path: frontend/coverage/
          retention-days: 30
      
      - name: Mark test success
        if: success()
        run: |
          echo "Tests passed successfully"
          # Here we could store this successful run in a persistent location if needed
      
  e2e-tests:
    name: Run E2E Tests
    needs:
      - changed-files
      - check-previous-runs
      - lint-backend
      - lint-frontend
      - build-backend
      - build-frontend
      - test-backend
      - test-frontend
    if: |
      always() && 
      (needs.lint-backend.result == 'success' || needs.lint-backend.result == 'skipped') && 
      (needs.lint-frontend.result == 'success' || needs.lint-frontend.result == 'skipped') && 
      (needs.build-backend.result == 'success' || needs.build-backend.result == 'skipped') &&
      (needs.build-frontend.result == 'success' || needs.build-frontend.result == 'skipped') &&
      (needs.test-backend.result == 'success' || needs.test-backend.result == 'skipped') &&
      (needs.test-frontend.result == 'success' || needs.test-frontend.result == 'skipped')
    uses: ./.github/workflows/e2e-tests.yml
    with:
      ref: ${{ github.ref }}
      skip_tests: false

  # This job is a placeholder to show the complete CI pipeline
  # The actual deployment happens in the deploy.yml workflow when code is pushed to prod
  deploy-ready:
    name: Ready for Deployment
    needs: [changed-files, check-previous-runs, e2e-tests, test-backend, test-frontend]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check for skipped tests
        id: check-skipped
        run: |
          BACKEND_SKIPPED="${{ needs.changed-files.outputs.backend != 'true' && needs.check-previous-runs.outputs.backend_previously_failed != 'true' }}"
          FRONTEND_SKIPPED="${{ needs.changed-files.outputs.frontend != 'true' && needs.check-previous-runs.outputs.frontend_previously_failed != 'true' }}"
          E2E_SKIPPED="${{ needs.changed-files.outputs.any_changes != 'true' && needs.check-previous-runs.outputs.e2e_previously_failed != 'true' }}"
          
          if [ "$BACKEND_SKIPPED" = "true" ]; then
            echo "Backend tests were skipped as no backend files changed and there were no previous failures"
          fi
          
          if [ "$FRONTEND_SKIPPED" = "true" ]; then
            echo "Frontend tests were skipped as no frontend files changed and there were no previous failures"
          fi
          
          if [ "$E2E_SKIPPED" = "true" ]; then
            echo "E2E tests were skipped as no files changed and there were no previous failures"
          fi
        
      - name: Check if all required tests passed
        if: |
          (needs.changed-files.outputs.backend != 'true' && needs.check-previous-runs.outputs.backend_previously_failed != 'true') || 
          needs.test-backend.result == 'success' && 
          ((needs.changed-files.outputs.frontend != 'true' && needs.check-previous-runs.outputs.frontend_previously_failed != 'true') || 
          needs.test-frontend.result == 'success') && 
          ((needs.changed-files.outputs.any_changes != 'true' && needs.check-previous-runs.outputs.e2e_previously_failed != 'true') || 
          needs.e2e-tests.result == 'success')
        run: echo "All checks passed! This PR is ready to be merged to prod for deployment."
        
      - name: Report failure
        if: |
          (needs.changed-files.outputs.backend == 'true' || needs.check-previous-runs.outputs.backend_previously_failed == 'true') && 
          needs.test-backend.result != 'success' || 
          (needs.changed-files.outputs.frontend == 'true' || needs.check-previous-runs.outputs.frontend_previously_failed == 'true') && 
          needs.test-frontend.result != 'success' || 
          (needs.changed-files.outputs.any_changes == 'true' || needs.check-previous-runs.outputs.e2e_previously_failed == 'true') && 
          needs.e2e-tests.result != 'success'
        run: |
          echo "Some checks failed! PR is not ready for deployment."
          exit 1 