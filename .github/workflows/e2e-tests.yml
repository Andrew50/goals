name: E2E Tests

on:
  workflow_call:
    inputs:
      ref:
        description: 'The branch, tag or SHA to checkout'
        required: false
        type: string
        default: ''
      skip_tests:
        description: 'Parameter kept for backward compatibility - E2E tests always run'
        required: false
        type: boolean
        default: false
      num_workers:
        description: 'Number of parallel workers for E2E tests'
        required: false
        type: number
        default: 32
permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  e2e-tests:
    name: Run E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60  # Reduced from default since we're parallelizing
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.ref }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'
      
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: |
          npm ci
          npm i -D @types/node
      
      - name: Install Playwright browsers
        working-directory: ./frontend
        run: npx playwright install --with-deps chromium
      
      - name: Install test dependencies
        working-directory: ./frontend
        run: npm install --save-dev jsonwebtoken @types/jsonwebtoken
      
      - name: Create test .env file
        run: |
          echo "GOALS_CLOUDFLARED_TOKEN=test_token" > .env
          echo "BACKUP_PATH=/tmp/backups" >> .env
          echo "GOALS_GEMINI_API_KEY=test_api_key" >> .env
          echo "JWT_SECRET=test_jwt_secret" >> .env
          echo "JWT_EXPIRATION=86400" >> .env
      
      - name: Make scripts executable
        run: |
          chmod +x start-parallel-test-env.sh
          chmod +x cleanup-parallel-test-env.sh
          chmod +x run-parallel-tests.sh
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend dev image (cached)
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: backend/Dockerfile.dev
          tags: goals_backend:dev
          load: true
          cache-from: type=gha,scope=goals-backend-dev
          cache-to: type=gha,mode=max,scope=goals-backend-dev

      - name: Build frontend dev image (cached)
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: frontend/Dockerfile.dev
          tags: goals_frontend:dev
          load: true
          cache-from: type=gha,scope=goals-frontend-dev
          cache-to: type=gha,mode=max,scope=goals-frontend-dev

      - name: Build db dev image (cached)
        uses: docker/build-push-action@v5
        with:
          context: ./db
          file: db/Dockerfile.dev
          tags: goals_db:dev
          load: true
          cache-from: type=gha,scope=goals-db-dev
          cache-to: type=gha,mode=max,scope=goals-db-dev
      
      - name: Start parallel test environment
        run: |
          export NUM_WORKERS=${{ inputs.num_workers }}
          ./start-parallel-test-env.sh
        env:
          NUM_WORKERS: ${{ inputs.num_workers }}
      
      - name: Run Playwright tests in parallel
        run: |
          export NUM_WORKERS=${{ inputs.num_workers }}
          ./run-parallel-tests.sh
        env:
          CI: true
          NUM_WORKERS: ${{ inputs.num_workers }}
      
      - name: Combine test reports
        if: always()
        run: |
          # Create a combined report directory
          mkdir -p frontend/playwright-report-combined
          
          # Copy all worker reports
          for worker_id in $(seq 0 $((${{ inputs.num_workers }} - 1))); do
            if [ -d "frontend/test-results-worker-$worker_id" ]; then
              cp -r frontend/test-results-worker-$worker_id/* frontend/playwright-report-combined/ 2>/dev/null || true
            fi
          done
          
          # Try to generate a combined HTML report
          cd frontend
          npx playwright show-report --host 0.0.0.0 --port 9323 playwright-report-combined/ &
          sleep 5
          pkill -f "playwright show-report" || true
          cd ..
      
      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-reports-parallel
          path: |
            frontend/test-results-worker-*/
            frontend/playwright-report-combined/
          retention-days: 30
      
      - name: Cleanup test environment
        if: always()
        run: |
          export NUM_WORKERS=${{ inputs.num_workers }}
          ./cleanup-parallel-test-env.sh
        env:
          NUM_WORKERS: ${{ inputs.num_workers }}
      
      - name: Mark test success
        if: success()
        run: |
          echo "E2E tests passed successfully with ${{ inputs.num_workers }} parallel workers" 
