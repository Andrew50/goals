name: CI

on:
  pull_request:
    branches: [ prod ]

jobs:
  check-backend:
    name: Check Rust Backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Check code format
        run: cargo fmt --all -- --check
      
      - name: Check with clippy
        run: cargo clippy -- -D warnings
      
      - name: Run tests
        run: cargo test
      
      - name: Build
        run: cargo build --verbose

  lint-frontend:
    name: Lint React Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Lint with ESLint
        run: npx eslint . --ext .js,.jsx,.ts,.tsx
      
      - name: Type check with TypeScript
        run: npx tsc --noEmit
      
  e2e-tests:
    name: Run E2E Tests
    runs-on: ubuntu-latest
    needs: [check-backend, lint-frontend]
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'
      
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: |
          npm ci
          npm i -D @types/node
      
      - name: Install Playwright browsers
        working-directory: ./frontend
        run: npx playwright install --with-deps chromium
      
      - name: Create test files
        run: |
          mkdir -p frontend/tests
          cat > frontend/tests/calendar.spec.ts << 'EOT'
          import { test, expect } from '@playwright/test';

          test.describe('Calendar Page E2E Tests', () => {
            test.beforeEach(async ({ page }) => {
              // Assume we have a test user and we're authenticated (for CI)
              await page.goto('/');
              
              // Mock API authentication for testing
              await page.evaluate(() => {
                localStorage.setItem('token', 'fake-test-token');
                localStorage.setItem('userId', '1');
              });
              
              // Go to calendar page - assuming it's available at root
              await page.goto('/');
              
              // Wait for the calendar to load
              await page.waitForSelector('.calendar-container', { timeout: 10000 });
            });

            test('should display calendar view', async ({ page }) => {
              // Check that main calendar elements are visible
              await expect(page.locator('.calendar-container')).toBeVisible();
              await expect(page.locator('.calendar-main')).toBeVisible();
              await expect(page.locator('.calendar-sidebar')).toBeVisible();
              
              // FullCalendar specific elements
              await expect(page.locator('.fc')).toBeVisible();
            });

            test('should show month view by default', async ({ page }) => {
              // Check that we're in month view by default
              await expect(page.locator('.fc-dayGridMonth-view')).toBeVisible();
              
              // Verify that navigation controls are present
              await expect(page.locator('.fc-prev-button')).toBeVisible();
              await expect(page.locator('.fc-next-button')).toBeVisible();
              await expect(page.locator('.fc-today-button')).toBeVisible();
            });

            test('should switch to week view', async ({ page }) => {
              // Click the week view button
              await page.locator('.fc-timeGridWeek-button').click();
              
              // Verify week view is displayed
              await expect(page.locator('.fc-timeGridWeek-view')).toBeVisible();
            });

            test('should switch to day view', async ({ page }) => {
              // Click the day view button
              await page.locator('.fc-timeGridDay-button').click();
              
              // Verify day view is displayed
              await expect(page.locator('.fc-timeGridDay-view')).toBeVisible();
            });

            test('should click on a day and possibly open goal menu', async ({ page }) => {
              // First, ensure we're in month view
              await page.locator('.fc-dayGridMonth-button').click();
              
              // Find a day cell - we'll click on the current day for simplicity
              await page.locator('.fc-day-today').click();
              
              // Since we can't easily verify if GoalMenu opened without knowing its specific structure,
              // this test just verifies the click happens without errors
            });
          });
          EOT

          mkdir -p frontend/tests/api
          cat > frontend/tests/api/calendar-api.spec.ts << 'EOT'
          import { test, expect } from '@playwright/test';
          import * as jwt from 'jsonwebtoken';

          // Base URL for your backend API
          const API_URL = 'http://localhost:5057';

          // Generate a valid JWT token for testing
          function generateTestToken() {
            // Use the same secret that's used in the backend (default_secret if not set)
            const secret = process.env.JWT_SECRET || 'default_secret';
            
            // Create a payload that matches the Claims struct in middleware.rs
            const payload = {
              user_id: 1,
              username: 'testuser',
              exp: Math.floor(Date.now() / 1000) + (60 * 60), // 1 hour expiration
            };
            
            // Sign the token
            return jwt.sign(payload, secret);
          }

          test.describe('Calendar API Tests', () => {
            test('GET /calendar should return calendar data', async ({ request }) => {
              // Create a valid test token for authentication
              const testToken = generateTestToken();

              // Make the request to the calendar endpoint
              const response = await request.get(`${API_URL}/calendar`, {
                headers: {
                  'Authorization': `Bearer ${testToken}`
                }
              });

              // Check if the response is successful
              expect(response.ok()).toBeTruthy();
              
              // Parse the response body
              const body = await response.json();
              
              // Validate the structure of the response
              expect(body).toHaveProperty('unscheduled_tasks');
              expect(body).toHaveProperty('scheduled_tasks');
              expect(body).toHaveProperty('routines');
              expect(body).toHaveProperty('achievements');

              // Now that we fixed our seed data, validate content
              expect(body.scheduled_tasks).toHaveLength(1);
              expect(body.unscheduled_tasks).toHaveLength(1);
              expect(body.routines).toHaveLength(1);
              expect(body.achievements).toHaveLength(1);
            });
          });
          EOT
          
          # Add jsonwebtoken dependency for tests
          cd frontend && npm install --save-dev jsonwebtoken @types/jsonwebtoken
      
      - name: Start test environment
        run: |
          # Start the test database and backend using docker-compose
          docker-compose -f docker-compose.dev.yaml -f docker-compose.test.yaml up -d
          
          # Wait for services to start
          echo "Waiting for services to start..."
          sleep 30
          
          # Basic healthcheck to ensure backend is up
          curl --retry 5 --retry-delay 5 --retry-connrefused http://localhost:5057/health || echo "Backend health check failed but continuing"
          
          # Seed the test database with test data
          docker-compose -f docker-compose.dev.yaml -f docker-compose.test.yaml exec -T goals_db_test /bin/bash -c "apt-get update && apt-get install -y cypher-shell && chmod +x /data/seed_test_db.sh && /data/seed_test_db.sh"
      
      - name: Run Playwright tests
        working-directory: ./frontend
        run: npx playwright test
        env:
          CI: true
          PLAYWRIGHT_BASE_URL: http://localhost:3000
          PLAYWRIGHT_TEST_BASE_URL: http://localhost:3000
      
      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 30
      
      - name: Cleanup test environment
        if: always()
        run: docker-compose -f docker-compose.dev.yaml -f docker-compose.test.yaml down -v 