services:
    goals_backend:
        container_name: goals_backend
        build:
            context: ./backend
            dockerfile: Dockerfile.prod
        restart: unless-stopped
        expose:
          - "5059"
        depends_on:
          - goals_db
        environment:
          - GOALS_GEMINI_API_KEY=${GOALS_GEMINI_API_KEY}
          - JWT_SECRET=${JWT_SECRET}
          - JWT_EXPIRATION=${JWT_EXPIRATION}
          - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
          - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
          - GOOGLE_REDIRECT_URL=${GOOGLE_REDIRECT_URL}
          - REACT_APP_GOOGLE_CLIENT_ID=${REACT_APP_GOOGLE_CLIENT_ID}
          - HOST_URL=${HOST_URL}
          - NEO4J_URI=${NEO4J_URI}
          - NEO4J_USERNAME=${NEO4J_USERNAME}
          - NEO4J_PASSWORD=${NEO4J_PASSWORD}
          - NEO4J_CONNECTION_TIMEOUT=300
        networks:
            - prod_network

    goals_db:
        container_name: goals_db
        build:
            context: ./db
            dockerfile: Dockerfile.prod
        volumes:
          - prod_goal_db:/data
          - ${BACKUP_PATH:-/var/lib/goals/backups}:/backups
          - ${BACKUP_LOGS_PATH:-/var/lib/goals/backup-logs}:/var/log/cron
        networks:
          - prod_network
        restart: unless-stopped
        healthcheck:
            test: ["CMD-SHELL", "bash -lc 'find /backups -maxdepth 1 -name neo4j_dump_*.dump -mmin -90 | grep -q .' "]
            interval: 5m
            timeout: 10s
            retries: 3
            start_period: 10m

    goals_frontend:
        container_name: goals_frontend
        build:
            context: ./frontend
            dockerfile: Dockerfile.prod
        expose:
          - "3030"
        restart: unless-stopped
        environment:
          - REACT_APP_API_URL=${REACT_APP_API_URL}
        networks:
          - prod_network
        
    goals_router:
        container_name: goals_router
        build:
            context: ./router
            dockerfile: Dockerfile.prod
        expose:
          - "80"
        depends_on:
          - goals_backend
          - goals_frontend
        networks:
          - prod_network
        restart: unless-stopped

    goals_cloudflared:
        container_name: goals_cloudflared
        image: cloudflare/cloudflared:latest
        command: tunnel run --token ${GOALS_CLOUDFLARED_TOKEN}
        restart: unless-stopped
        networks:
          - prod_network

volumes:
    prod_goal_db:

networks:
    prod_network:
        driver: bridge
    
